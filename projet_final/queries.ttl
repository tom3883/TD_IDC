##############################
## link results api result to schema
##############################

PREFIX : <http://recipes-project.com/schema#>

SELECT  ?recipeName ?dishType
WHERE {
    ?category a :RecipeCategory ;
    skos:prefLabel ?dishType .
    SERVICE <http://localhost/service/edamam/findRecipes?keyword=cake> {
        ?recipe :name ?recipeName ;
        :recipeCategory ?dishType .
    }
}

##############################
## get recipes with the product sold at walmart
##############################

# federated query
PREFIX : <http://recipes-project.com/schema#>

SELECT  DISTINCT ?recipeName ?dishType ?ingredient ?productName ?price
WHERE {
    SERVICE <http://localhost/service/edamam/findRecipes?keyword=cake> {
        ?r :name ?recipeName ;
           :recipeCategory ?dishType ;
           :recipeIngredient ?ingredient .
    }
    OPTIONAL {
       ?product :productName ?productName ;
       :price ?price .
       FILTER (lcase(STR(?productName)) = lcase(STR(?ingredient))) 
    }
}

# ingredients 
PREFIX : <http://recipes-project.com/schema#>

SELECT  DISTINCT ?recipeName ?dishType ?ingredient ?productName ?price
WHERE {
    SERVICE <http://localhost/service/edamam/findRecipes?keyword=yogurt> {
        ?r :name ?recipeName ;
           :recipeCategory ?dishType ;
           :recipeIngredient ?ingredient .
    }
    OPTIONAL { FILTER CONTAINS(lcase(STR(?ingredient)), "yogurt") }
    OPTIONAL {
       ?product :productName ?productName ;
       :price ?price ;
       :categoryName ?categoryName .
       FILTER (lcase(STR(?productName)) = lcase(STR(?ingredient))) 
    }
}

##############################
## perform the post-processing of the annotated data in order to extract only the products of the category dbo:Food
##############################

PREFIX db: <http://dbpedia.org/resource/>
PREFIX s: <http://recipes-project.com/schema/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbo: <https://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX : <http://recipes-project.com/>

CONSTRUCT {
  ?product s:productName ?productName ;
	s:brandName ?brandName;
	s:categoryName ?categoryName;
	s:price ?price;
               s:deduced_type ?dbpediaResource .
  ?dbpediaResource rdf:type ?y .
  ?y rdfs:label "Food"@en .
}
WHERE {
  ?product s:productName ?productName ;
	s:brandName ?brandName;
	s:categoryName ?categoryName;
	s:price ?price;
               s:deduced_type ?dbpediaResource .

  FILTER EXISTS {
    SERVICE <http://dbpedia.org/sparql> {
      ?dbpediaResource rdf:type ?y .
      ?y rdfs:label "Food"@en .
    }
  }
}


##############################
## construct a graph containing all the data about Brands
##############################

PREFIX : <http://recipes-project.com/schema/>
PREFIX brand: <http://recipes-project.com/brand/>

CONSTRUCT {
  ?brandUri brand:brandName ?brandName .
}
WHERE {
  ?product :brandName ?brandName .
  BIND(IRI(CONCAT("http://recipes-project.com/brand/", REPLACE(STR(?brandName), "[^a-zA-Z0-9]", ""))) AS ?brandUri)
}

##############################
## append the brand URIs to the product data
##############################

PREFIX : <http://recipes-project.com/schema/>
PREFIX brand: <http://recipes-project.com/brand/>

CONSTRUCT {
  ?product :productName ?productName ;
                 :categoryName ?catName ;
                 :deduced_type ?type ;
                 :price ?price ;
	  :brandName ?brandName ;
  	  :brand ?brandUri .
}
WHERE {
  ?product :productName ?productName ;
                 :categoryName ?catName ;
                 :deduced_type ?type ;
                 :price ?price ;
	  :brandName ?brandName .
  ?brandUri brand:brandName ?brandName .
}


###############################
## type the brands in the brand data
###############################
PREFIX s: <http://recipes-project.com/schema#> .
PREFIX ns1: <http://recipes-project.com/brand#> .

CONSTRUCT {
  ?brand a s:Brand .
  ?brand ?x ?y .
}
WHERE {
  ?brand ?x ?y.
}


###############################
## look for all the products of category "Wine" for recipes of keyword "Wine" 
###############################

PREFIX : <http://recipes-project.com/schema#>

SELECT  DISTINCT  ?brand ?productName ?price ?categoryName ?recipeName 
WHERE {
    SERVICE <http://localhost/service/edamam/findRecipes?keyword=wine> {
        ?r :name ?recipeName ;
           :recipeCategory ?dishType ;
           :recipeIngredient ?ingredient .
    }
       ?product :productName ?productName ;
	:categoryName ?categoryName;
               :brand ?brand ;
               :price ?price .
       FILTER (STR(?productName) = STR(?ingredient)) 
       FILTER (?categoryName == "Wine")
}

###############################
## retrieve all the products related to the schema-defined category "Dairy" for recipes of keyword "yogurt" 
###############################

PREFIX : <http://recipes-project.com/schema#>
PREFIX dbo: <https://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX db: <http://dbpedia.org/resource/>
PREFIX cat: <http://recipes-project.com/recipe_product_categories/>
PREFIX dbc:    <http://dbpedia.org/page/>
PREFIX dcterms: <https://www.dublincore.org/specifications/dublin-core/dcmi-terms/#subject>

SELECT  DISTINCT  ?productName ?deduced_type ?recipeName 
WHERE {
      SERVICE <http://localhost/service/edamam/findRecipes?keyword=yogurt> {
        ?r :name ?recipeName ;
           :recipeCategory ?dishType ;
           :recipeIngredient ?ingredient .
       }
       ?category a cat:ProductCategory;
	skos:closeMatch ?cat .
       ?product :productName ?productName ;
	:deduced_type ?deduced_type;
       OPTIONAL {
       FILTER (STR(?productName) = STR(?ingredient)) 
       
       FILTER EXISTS {
       SERVICE <http://dbpedia.org/sparql> {
                ?deduced_type dcterms:subject ?c .
                ?c skos:broader  ?cat .
        }
    }
  }
}
