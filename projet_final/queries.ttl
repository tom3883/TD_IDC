##############################
## link results api result to schema
##############################

PREFIX : <http://recipes-project.com/schema#>

SELECT  ?recipeName ?dishType
WHERE {
    ?c a :RecipeCategory ;
    skos:prefLabel ?dishType .
    SERVICE <http://localhost/service/edamam/findRecipes?keyword=cake> {
        ?recipe :name ?recipeName ;
        :recipeCategory ?dishType .
    }
}

##############################
## link api and products
##############################

# federated query
PREFIX : <http://recipes-project.com/schema#>

SELECT  DISTINCT ?recipeName ?dishType ?ingredient ?productName ?price
WHERE {
    SERVICE <http://localhost/service/edamam/findRecipes?keyword=cake> {
        ?r :name ?recipeName ;
           :recipeCategory ?dishType ;
           :recipeIngredient ?ingredient .
    }
    OPTIONAL {
       ?product :productName ?productName ;
       :price ?price .
       FILTER (STR(?productName) = STR(?ingredient)) 
    }
}

##############################
## perform the post-processing of the annotated data in order to extract only the products of the category dbo:Food
##############################

PREFIX db: <http://dbpedia.org/resource/>
PREFIX s: <http://recipes-project.com/schema/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbo: <https://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX : <http://recipes-project.com/>

CONSTRUCT {
  ?product s:productName ?productName ;
	s:brandName ?brandName;
	s:categoryName ?categoryName;
	s:price ?price;
               s:deduced_type ?dbpediaResource .
  ?dbpediaResource rdf:type ?y .
  ?y rdfs:label "Food"@en .
}
WHERE {
  ?product s:productName ?productName ;
	s:brandName ?brandName;
	s:categoryName ?categoryName;
	s:price ?price;
               s:deduced_type ?dbpediaResource .

  FILTER EXISTS {
    SERVICE <http://dbpedia.org/sparql> {
      ?dbpediaResource rdf:type ?y .
      ?y rdfs:label "Food"@en .
    }
  }
}


##############################
## construct a graph containing all the data about Brands
##############################

PREFIX : <http://recipes-project.com/schema/>
PREFIX brand: <http://recipes-project.com/brand/>

CONSTRUCT {
  ?brandUri brand:brandName ?brandName .
}
WHERE {
  ?product :brandName ?brandName .
  BIND(IRI(CONCAT("http://recipes-project.com/brand/", REPLACE(STR(?brandName), "[^a-zA-Z0-9]", ""))) AS ?brandUri)
}

##############################
## append the brand URIs to the product data
##############################

PREFIX : <http://recipes-project.com/schema/>
PREFIX brand: <http://recipes-project.com/brand/>

CONSTRUCT {
  ?product :productName ?productName ;
                 :categoryName ?catName ;
                 :deduced_type ?type ;
                 :price ?price ;
	  :brandName ?brandName ;
  	  :brand ?brandUri .
}
WHERE {
  ?product :productName ?productName ;
                 :categoryName ?catName ;
                 :deduced_type ?type ;
                 :price ?price ;
	  :brandName ?brandName .
  ?brandUri brand:brandName ?brandName .
}
